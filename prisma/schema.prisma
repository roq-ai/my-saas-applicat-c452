generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model flashcard_deck {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                 @db.VarChar
  description          String?                @db.VarChar
  image                String?                @db.VarChar
  creator_id           String                 @db.Uuid
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  updated_at           DateTime               @default(now()) @db.Timestamp(6)
  user                 user                   @relation(fields: [creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  group_flashcard_deck group_flashcard_deck[]
}

model group {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                 @db.VarChar
  description          String?                @db.VarChar
  image                String?                @db.VarChar
  admin_id             String                 @db.Uuid
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  updated_at           DateTime               @default(now()) @db.Timestamp(6)
  user                 user                   @relation(fields: [admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  group_flashcard_deck group_flashcard_deck[]
  group_member         group_member[]
}

model group_flashcard_deck {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  group_id          String         @db.Uuid
  flashcard_deck_id String         @db.Uuid
  created_at        DateTime       @default(now()) @db.Timestamp(6)
  updated_at        DateTime       @default(now()) @db.Timestamp(6)
  flashcard_deck    flashcard_deck @relation(fields: [flashcard_deck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  group             group          @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model group_member {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  group_id   String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  group      group    @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model pdf {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  file_path  String   @db.VarChar
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model schedule {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_date DateTime @db.Date
  end_date   DateTime @db.Date
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String           @unique @db.VarChar(255)
  firstName      String?          @db.VarChar(255)
  lastName       String?          @db.VarChar(255)
  roq_user_id    String           @db.VarChar(255)
  tenant_id      String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  flashcard_deck flashcard_deck[]
  group          group[]
  group_member   group_member[]
  pdf            pdf[]
  schedule       schedule[]
}
